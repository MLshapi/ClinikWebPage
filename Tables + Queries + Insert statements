 ============================================================================================================
 
Write your questions Here and i will Try to answer them:


============================================================================================================== 
DROP DATABASE IF EXISTS nc;
CREATE DATABASE  nc;

DROP TABLE IF EXISTS nc.employeetitle;
CREATE TABLE nc.employeetitle
(
  `EmployeeTitleID` 		int NOT NULL,
  `EmployeeTitle` 			varchar(45) DEFAULT NULL,
  PRIMARY KEY (`EmployeeTitleID`)
);

INSERT INTO nc.employeetitle (EmployeeTitleID, EmployeeTitle)
VALUES
	(1, 'Dentist'),
    (2, 'Dentist Assitant'),
    (3, 'Receptionist');

DROP TABLE IF EXISTS nc.clinic;
CREATE TABLE nc.clinic 
(
  `ClinicID` 					int NOT NULL AUTO_INCREMENT,
  `ClinicName` 					varchar(45) DEFAULT NULL,
  `ClinicAddress` 				varchar(100) DEFAULT NULL,
  `ClinicCity` 					varchar(45) DEFAULT NULL,
  `ClinicProvince` 				varchar(45) DEFAULT NULL,
  `ClinicPostalCode` 			varchar(10) DEFAULT NULL,
  `ClinicCountry`			    varchar(45) DEFAULT NULL,
  PRIMARY KEY (`ClinicID`)
);

INSERT INTO nc.clinic(ClinicName, ClinicAddress, ClinicCity, ClinicProvince, ClinicPostalCode, ClinicCountry)
VALUES
	('Clinic A', '123 Street abc', 'City A', 'Province A', '123456', 'Country A'),
    ('Clinic B', '456 Street def', 'City B', 'Province B', '784565', 'Country B');


DROP TABLE IF EXISTS nc.employee;
CREATE TABLE nc.employee 
(
  `EmployeeID` 			int NOT NULL AUTO_INCREMENT,
  `EmployeeFirstName` 	varchar(45) DEFAULT NULL,
  `EmployeeLastName` 	varchar(45) DEFAULT NULL,
  `EmployeeTitleID` 	int NOT NULL,
  `ClinicID` 			int NOT NULL,
  PRIMARY KEY (`EmployeeID`),
  CONSTRAINT FK_EmployeeTitleID FOREIGN KEY (EmployeeTitleID) REFERENCES nc.employeetitle(EmployeeTitleID),
  CONSTRAINT FK_ClinicID FOREIGN KEY (ClinicID) REFERENCES nc.clinic(ClinicID)
);

INSERT INTO nc.employee(EmployeeFirstName, EmployeeLastName, EmployeeTitleID, ClinicID)
VALUES
	('Dentist A', 'Dentist A', 1, 1),
    ('Dentist B', 'Dentist B', 1, 2),
    ('Assistant A', 'Assistant A', 2, 1),
    ('Assistant B', 'Assistant B', 2, 1),
    ('Assistant C', 'Assistant C', 2, 2),
    ('Receptionist A', 'Receptionist B', 3, 1),
    ('Receptionist B', 'Receptionist B', 3, 1),
    ('Receptionist C', 'Receptionist C', 3, 2);

DROP TABLE IF EXISTS nc.treatment;
CREATE TABLE nc.treatment (
  `TreatmentID` 			int NOT NULL AUTO_INCREMENT,
  `TreatmentName` 			varchar(45) DEFAULT NULL,
  `TreatmentStandardPrice` 	decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`TreatmentID`)
);

INSERT INTO nc.treatment(TreatmentName, TreatmentStandardPrice)
VALUES
	('Treatment 1', 50),
    ('Treatment 2', 75),
    ('Treatment 3', 60),
    ('Treatment 4', 100);

DROP TABLE IF EXISTS nc.patient;
CREATE TABLE nc.patient (
  `PatientID` 				int NOT NULL AUTO_INCREMENT,
  `PatientFirstName` 		varchar(45) NOT NULL,
  `PatientLastName` 		varchar(45) NOT NULL,
  `PatientDOB` 				date DEFAULT NULL,
  PRIMARY KEY (`PatientID`)
);

INSERT INTO nc.patient (PatientFirstName, PatientLastName, PatientDOB)
VALUES
	('Patient A First Name', 'Patient A Last Name', '1980-01-01'),
    ('Patient B First Name', 'Patient B Last Name', '1985-05-01'),
    ('Patient C First Name', 'Patient C Last Name', '1990-08-01'),
    ('Patient D First Name', 'Patient D Last Name', '1995-11-01'),
    ('Patient E First Name', 'Patient E Last Name', '2000-04-01');

DROP TABLE IF EXISTS nc.appointment;
CREATE TABLE nc.appointment
(
  `AppointmentID` 			int NOT NULL AUTO_INCREMENT,
  `PatientID` 				int NOT NULL,
  `AppointmentDateTime` 	datetime NOT NULL,
  `ClinicID` 				int NOT NULL,
  `DentistEmployeeID`		int NULL,
  `CreatedByEmployeeID` 	int NOT NULL,
  `IsMissedAppointment` 	tinyint DEFAULT NULL,
  PRIMARY KEY (`AppointmentID`),
  CONSTRAINT FK_PatientID FOREIGN KEY (PatientID) REFERENCES nc.patient(PatientID),
  CONSTRAINT FK_AppointmentClinicID FOREIGN KEY (ClinicID) REFERENCES nc.clinic(ClinicID),
  CONSTRAINT FK_CreatedByEmployeeID FOREIGN KEY (CreatedByEmployeeID) REFERENCES nc.employee(employeeID)
);

INSERT INTO nc.appointment(PatientID, AppointmentDateTime, ClinicID, DentistEmployeeID, CreatedByEmployeeID, IsMissedAppointment)
VALUES
	(1, '2019-01-05 10:00:00', 1, null, 6, 0),
    (1, '2019-03-05 12:00:00', 1, 1, 7, 0),
    (2, '2019-05-05 14:00:00', 2, null, 8, 0),
    (3, '2019-06-10 11:00:00', 1, 1, 6, 0),
    (2, '2019-08-05 14:00:00', 2, 2, 8, 1),
    (3, '2019-09-10 11:00:00', 2, 2, 8, 0),
    (4, '2019-09-11 10:30:00', 2, 2, 8, 0),
    (5, '2019-12-20 11:30:00', 1, 1, 7, 0),
	(1, '2020-04-20 13:00:00', 1, 1, 7, null),
    (5, '2020-05-01 11:30:00', 1, 1, 7, null);


DROP TABLE IF EXISTS nc.bill;
CREATE TABLE nc.bill 
(
  `BillID` 						int NOT NULL AUTO_INCREMENT,
  `AppointmentID` 				int NOT NULL,
  `PaidAmount` 					decimal(10,2) DEFAULT NULL,
  `PaymentDateTime` 			datetime DEFAULT NULL,
  `BillProcessedByEmployeeID`   int DEFAULT NULL,
  PRIMARY KEY (`BillID`),
  CONSTRAINT FK_AppointmentID FOREIGN KEY (AppointmentID) REFERENCES nc.appointment(AppointmentID),
  CONSTRAINT FK_BillProcessedBy FOREIGN KEY (BillProcessedByEmployeeID) REFERENCES nc.employee(employeeID)
);

INSERT INTO nc.bill (AppointmentID, PaidAmount, PaymentDateTime, BillProcessedByEmployeeID)
VALUES
	(1,160,'2019-01-05 12:00:00',6),
	(2,325,'2019-03-05 14:00:00',7),
	(3,140,'2019-05-05 16:00:00',8),
	(4,235,'2019-06-10 13:00:00',7),
	(6,230,'2019-09-10 13:00:00',8),
	(7,200,'2019-09-11 12:30:00',8),
	(8,380,'2019-12-20 13:30:00',6);


DROP TABLE IF EXISTS nc.billitem;
CREATE TABLE nc.billitem 
(
  `BillItemID` 						int NOT NULL AUTO_INCREMENT,
  `BillID` 							int NOT NULL,
  `TreatmentID` 					int NOT NULL,
  `TreatmentPrice` 					decimal(10,2) NOT NULL,
  `TreatmentUnitCount` 				int NOT NULL,
  `TreatmentAssignedByEmployeeID` 	int NOT NULL,
  `TreatmentAssignedDateTime` 		datetime NOT NULL,
  `TreatmentExecutedByEmployeeID` 	int DEFAULT NULL,
  `TreatmentExcutedDateTime` 		datetime DEFAULT NULL,
  PRIMARY KEY (`BillItemID`),
  CONSTRAINT FK_TreatmentID FOREIGN KEY (TreatmentID) REFERENCES nc.treatment(TreatmentID),
  CONSTRAINT FK_BillID FOREIGN KEY (BillID) REFERENCES nc.bill(BillID),
  CONSTRAINT FK_TreatmentAssignedByEmployeeID FOREIGN KEY (TreatmentAssignedByEmployeeID) REFERENCES nc.employee(employeeID),
  CONSTRAINT FK_TreatmentExecutedByEmployeeID FOREIGN KEY (TreatmentExecutedByEmployeeID) REFERENCES nc.employee(employeeID)
);

INSERT INTO nc.billitem(BillID, TreatmentID, TreatmentPrice, TreatmentUnitCount, TreatmentAssignedByEmployeeID, TreatmentAssignedDateTime, TreatmentExecutedByEmployeeID, TreatmentExcutedDateTime)
VALUES
	(1,1,50,2,1,'2019-01-05 11:00:00',3,'1900-01-03 00:00:00'),
	(1,2,60,1,1,'2019-01-05 11:00:00',1,'1900-01-01 00:00:00'),
	(2,1,50,1,1,'2019-03-05 13:00:00',4,'1900-01-04 00:00:00'),
	(2,2,75,1,1,'2019-03-05 13:00:00',4,'1900-01-04 00:00:00'),
	(2,4,100,2,1,'2019-03-05 13:00:00',1,'1900-01-01 00:00:00'),
	(3,3,50,1,2,'2019-05-05 15:00:00',5,'1900-01-05 00:00:00'),
	(3,4,90,1,2,'2019-05-05 15:00:00',2,'1900-01-02 00:00:00'),
	(4,1,50,2,1,'2019-06-10 12:00:00',3,'1900-01-03 00:00:00'),
	(4,2,75,1,1,'2019-06-10 12:00:00',4,'1900-01-04 00:00:00'),
	(4,3,60,1,1,'2019-06-10 12:00:00',1,'1900-01-01 00:00:00'),
	(5,1,50,1,2,'2019-09-10 12:00:00',5,'1900-01-05 00:00:00'),
	(5,4,90,2,2,'2019-09-10 12:00:00',2,'1900-01-02 00:00:00'),
	(6,4,100,2,2,'2019-09-11 11:30:00',5,'1900-01-05 00:00:00'),
	(7,1,50,2,1,'2019-12-20 12:30:00',3,'1900-01-03 00:00:00'),
	(7,3,60,3,1,'2019-12-20 12:30:00',4,'1900-01-04 00:00:00'),
	(7,4,100,1,1,'2019-12-20 12:30:00',1,'1900-01-01 00:00:00');






select 
	e.EmployeeID,
    e.EmployeeFirstName,
    e.EmployeeLastName,
    cl.ClinicName
from
	nc.employee e
    INNER JOIN nc.employeetitle et ON
		et.EmployeeTitleID = e.EmployeeTitleID
	INNER JOIN nc.Clinic cl ON
		CL.ClinicID = e.ClinicID
where
	et.EmployeeTitle = 'Dentist';

WITH cteSequence AS
(
	SELECT 1 AS ID UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8
),

cteWeeks AS
(
	SELECT
		MAKEDATE(2020,ROW_NUMBER() OVER (ORDER BY a.ID, b.ID, c.ID)) AS Date,
		WEEKOFYEAR(MAKEDATE(2020,ROW_NUMBER() OVER (ORDER BY a.ID, b.ID, c.ID))) AS WeekNumber,
        YEAR(MAKEDATE(2020,ROW_NUMBER() OVER (ORDER BY a.ID, b.ID, c.ID))) AS DateYear
	FROM
		cteSequence a
		CROSS JOIN cteSequence b
        CROSS JOIN cteSequence c
)

SELECT
	W.WeekNumber,
    MIN(W.Date) AS WeekStartDate,
    MAX(W.Date) AS WeekEndDate,
    CASE
		WHEN MIN(W.Date) = MAX(W.Date) THEN DATE_FORMAT(MIN(W.Date), '%M %d, %Y')
        ELSE CONCAT('From ', DATE_FORMAT(MIN(W.Date), '%M %d, %Y'), ' to ', DATE_FORMAT(MAX(W.Date), '%M %d, %Y'))
	END AS WeekName
FROM
	cteWeeks W
WHERE
	W.DateYear = 2020
GROUP BY
	W.WeekNumber
ORDER BY
	W.WeekNumber;



SELECT
	*
FROM
	nc.Appointment a
    INNER JOIN nc.Employee e ON
		e.EmployeeID = a.DentistEmployeeID
WHERE
	WEEKOFYEAR(a.AppointmentDateTime) = WEEKOFYEAR('20200101') AND
    YEAR(a.AppointmentDateTime) = YEAR('20200101') AND
    e.employeeID = 1;
   
 
SELECT
	a.AppointmentID,
    e.EmployeeID,
	concat(e.EmployeeFirstName, ' ', e.EmployeeLastName) AS DentistName,
    concat(p.PatientFirstName, ' ', p.PatientLastName) AS PatientName
FROM
	nc.appointment a
    INNER JOIN nc.Employee e ON
		e.EmployeeID = a.DentistEmployeeID
	INNER JOIN nc.clinic c ON
		e.ClinicID = c.ClinicID
	INNER JOIN nc.patient p On
		p.PatientID = a.PatientID
WHERE
	date(a.AppointmentDateTime) = data($) AND (c.ClinicID = $ OR c.ClinicName = $); 
   
    
SELECT
	a.AppointmentID,
    e.EmployeeID,
	concat(e.EmployeeFirstName, ' ', e.EmployeeLastName) AS Dentist,
    a.CreatedByEmployeeID,
    c.ClinicName,
    c.ClinicAddress,
    c.ClinicCity,
    c.ClinicCountry,
    c.ClinicProvince,
    c.ClinicPostalCode
FROM
	nc.appointment a
    INNER JOIN nc.employee e ON
		e.EmployeeID = a.DentistEmployeeID
	INNER JOIN nc.clinic c ON
		e.ClinicID = c.ClinicID
	INNER JOIN nc.patient p On
		p.PatientID = a.PatientID
WHERE
	p.PatientID =$  OR (p.PatientFirstName =$ && p.PatientLastName =$) ; 
      



SELECT
	*
FROM
	nc.appointments a 
    INNER JOIN nc.clinic e
    ON a.ClinicID = e.ClinicID 
WHERE
	e.ClinicName = $ OR e.ClinicID =$;


SELECT
	count(P.PatientID),
    P.PatientID,
    p.PatientFirstName,
    p.PatientLastName,
    a.AppointmentDateTime
FROM
	nc.patient p 
    INNER JOIN nc.appointment a
    ON p.PatientID = a.PatientID
WHERE
	(a.IsMissedAppointment = NULL)
GROUP BY
	P.PatientID;


select
	t.TreatmentID,
    t.TreatmentName,
    bi.TreatmentPrice,
    bi.TreatmentUnitCount,
    bi.TreatmentPrice*bi.TreatmentUnitCount AS TreatmentTotalPrice,
    CONCAT(ea.EmployeeFirstName, ' ', ea.EmployeeLastName) AS AssignedBy,
    DATE_FORMAT(bi.TreatmentAssignedDateTime , "%b, %d %Y %h:%i %p") AS AssignmentDateTime,
    CONCAT(ee.EmployeeFirstName, ' ', ee.EmployeeLastName) AS ExecutedBy,
    DATE_FORMAT(bi.TreatmentExcutedDateTime , "%b, %d %Y %h:%i %p") AS ExecutionDateTime
from
	nc.billitem bi
    INNER JOIN nc.bill b
    ON bi.BillID = b.BillID
    INNER JOIN nc.appointment a
    ON a.AppointmentID = b.AppointmentID
    INNER JOIN nc.treatment t
    ON t.TreatmentID = bi.TreatmentID
    INNER JOIN nc.employee ea
    ON ea.EmployeeID = bi.TreatmentAssignedByEmployeeID
    LEFT JOIN nc.employee ee
    ON ea.EmployeeID = bi.TreatmentExecutedByEmployeeID
where
	a.AppointmentID = 1;

WITH AllBills AS
(
	select
		p.PatientID,
		CONCAT(p.PatientFirstName, ' ', p.PatientLastName) AS PatientFullName,
		a.AppointmentID,
		DATE_FORMAT(a.AppointmentDateTime, "%b, %d %Y %h:%i %p") AS AppointmentDateTime,
		c.ClinicID,
		concat(c.ClinicAddress, ' ', c.ClinicCity, ' ', c.ClinicProvince, ' ', c.ClinicPostalCode, ' ',c.ClinicCountry) AS ClinicAddress,
		SUM(bi.TreatmentPrice*bi.TreatmentUnitCount) AS BilledAmount,
		COALESCE(b.PaidAmount, 0) AS PaidAmount
	from
		nc.bill b
		INNER JOIN nc.appointment a 
		ON b.AppointmentID = a.AppointmentID
		INNER JOIN nc.patient p
		ON p.PatientID = a.PatientID
		INNER JOIN nc.billitem bi
		ON bi.BillID = b.BillID
		INNER JOIN nc.clinic c
		ON c.ClinicID = a.ClinicID
	GROUP BY
		p.PatientID,
		CONCAT(p.PatientFirstName, ' ', p.PatientLastName),
		a.AppointmentID,
		DATE_FORMAT(a.AppointmentDateTime, "%b, %d %Y %h:%i %p"),
		c.ClinicID,
		concat(c.ClinicAddress, ' ', c.ClinicCity, ' ', c.ClinicProvince, ' ', c.ClinicPostalCode, ' ',c.ClinicCountry),
		COALESCE(b.PaidAmount, 0)
)
	SELECT
		ab.PatientID, ab.PatientFullName, ab.AppointmentID, ab.AppointmentDateTime, ab.ClinicID, ab.ClinicAddress, ab.BilledAmount, ab.PaidAmount
	FROM
		AllBills ab
	WHERE
		ab.BilledAmount <> ab.PaidAmount;
        =================================================================================================
        Extra Queres
        
UPDATE nc.appointment
SET 
   AppointmentDateTime = $newDateTime
WHERE
    PatientID = $;
    
DELETE FROM 
	nc.patient p 
WHERE 
	(p.PatientID = $ID) 
    OR 
    (p.PatientFirstName = $FirstNAme AND p.PatientLastName = $LastNAme);
    
INSERT INTO 
	nc.patient (PatientFirstName , PatientLastName ,PatientDOB ,PatientDOB) 
	VALUES
		($PatientFirstName , $PatientLastName ,$PatientDOB ,$PatientDOB);
 
 
 
